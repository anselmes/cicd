name: Release Workflow
description: |
  Build and package artefacts using GitHub Actions.
  This action builds artefacts for different programming languages (Swift, Rust, Go)
  and packages them into tar.gz files. It can also publish the artefacts if required.

inputs:
  tag:
    description: The tag name (e.g. v1.2.3, swift-foo)
    required: true
  target:
    description: Target to build (swift | rust | go)
    required: true
  context:
    description: Context directory for the build (default is current directory)
    default: .
    required: false
  publish:
    description: Whether to publish the artefact
    default: "false"
    required: false
  arch:
    description: Architecture to build for (e.g. amd64, arm64)
    default: amd64
    required: false
  os:
    description: Operating system to build for (e.g. linux, macos)
    default: linux
    required: false

# TODO: #23 setup cosign
runs:
  using: composite
  steps:
    - id: prep
      shell: bash
      run: |
        echo "##[group]Detected target: $TARGET"
        echo "##[endgroup]"
      env:
        TARGET: ${{ inputs.target }}

    - name: Setup Swift
      if: inputs.target == 'swift'
      uses: swift-actions/setup-swift@682457186b71c25a884c45c06f859febbe259240 # 2.3.0

    - name: Setup Rust
      if: inputs.target == 'rust'
      uses: actions-rust-lang/setup-rust-toolchain@fb51252c7ba57d633bc668f941da052e410add48 # v1.13.0
      with:
        cache: true

    - name: Setup Go
      if: inputs.target == 'go'
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        cache: true

    - name: Run build command
      if: inputs.target == 'swift' || inputs.target == 'rust' || inputs.target == 'go'
      shell: bash
      run: |
        set -euo pipefail
        case "$TARGET" in
          swift) swift build -c release --arch "$ARCH" ;;
          rust)  cargo build --release ;;
          go)
            go mod tidy
            CGO_ENABLED=0 go build -trimpath -ldflags "-s -w" -o bin/mytool ;;
        esac
      env:
        ARCH: ${{ inputs.arch }}
        TARGET: ${{ inputs.target }}

    - name: Package artefact
      if: inputs.target == 'swift' || inputs.target == 'rust' || inputs.target == 'go'
      shell: bash
      run: |
        mkdir -p dist
        ART="$TARGET-$TAG-$OS.tar.gz"
        tar -czf dist/$ART $(ls bin 2>/dev/null || ls .build/release)
        echo "asset=$ART" >> "$GITHUB_OUTPUT"
      env:
        OS: ${{ inputs.os }}
        TAG: ${{ inputs.tag }}
        TARGET: ${{ inputs.target }}

    # TODO: #31 Publish artefact
    - name: Publish artefact
      if: inputs.publish == 'true' && (inputs.target == 'swift' || inputs.target == 'rust' || inputs.target == 'go')
      shell: bash
      run: echo "Publishing artefact..."

    - name: Attest Build Provenance
      uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      with:
        push-to-registry: true
        subject-digest: ${{ steps.build.outputs.digest }}
        subject-name: ${{ steps.build.outputs.metadata.image.name }}
        # subject-path: ${{ inputs.dockerfile }}
